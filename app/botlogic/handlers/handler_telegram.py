from aiogram import Bot
from aiogram import Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram import Router
from fastapi import HTTPException

from app.auth.schemas import CreateUser
from app.auth.user_service import UserService
from app.core.db_dependency import DBDependency
from app.core.logger import Logger
from app.core.settings import get_settings
from app.services.motivation_ai import HuggingFacePredictor
from app.services.prediction_service import PredictionService

logger_factory = Logger(mode="dev")
logger = logger_factory.get_logger(__name__)

bot: Bot = Bot(token=get_settings().bot_settings.bot_token.get_secret_value())
dispatcher: Dispatcher = Dispatcher()
main_router: Router = Router()
db_dependency: DBDependency = DBDependency()


@main_router.message(Command("start"))
async def start_handler(message: Message) -> None:
    """–ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ start –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –º–æ–π —Ö–æ—Ä–æ—à–∏–π! –Ø –±–æ—Ç-–º–æ—Ç–∏–≤–∞—Ç–æ—Ä, "
        "–±—É–¥—É —Ç–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É –∏ –¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å."
    )


@main_router.message(Command("about"))
async def about_handler(message: Message) -> None:
    """–ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ about"""
    await message.answer(
        "ü§ñ –ë–æ—Ç-–º–æ—Ç–∏–≤–∞—Ç–æ—Ä\n\n"
        "–Ø –ø–æ–º–æ–≥–∞—é —Ç–µ–±–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ø–æ–∑–∏—Ç–∏–≤–∞:\n"
        "‚Ä¢ –î–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å\n"
        "‚Ä¢ –ü–æ–¥–±–∞–¥—Ä–∏–≤–∞—é –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Ç—ã ‚Äî –º–æ–ª–æ–¥–µ—Ü!\n\n"
        "üõ†Ô∏è –í–µ—Ä—Å–∏—è: 1.0\n"
        "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: –∫–æ–º–∞–Ω–¥–æ–π –ø–æ—Ä–æ—Å—è—Ç\n"
    )


@main_router.message(Command("get_prediction"))
async def bot_get_prediction(message: Message) -> None:
    """–ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ get_prediction"""
    telegram_user_id = str(message.from_user.id)
    name = message.from_user.full_name
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞: telegram_user_id={telegram_user_id}  name={name}"
    )
    user_service = UserService(db=db_dependency)
    prediction_service = PredictionService(db=db_dependency)

    user = await user_service.get_user_by_uuid(telegram_user_id)
    if not user:
        user = await user_service.create_user(
            CreateUser(name=name, uuid=telegram_user_id)
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: name={name}, uuid={telegram_user_id}")

    prediction = await prediction_service.get_prediction_for_user(user.id)

    if prediction:
        response_text = prediction.main_prediction
    else:
        predictor = HuggingFacePredictor()
        response_text = predictor.get_prediction()
        await prediction_service.save_prediction_in_db(response_text, user.id)
        logger.info(
            f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user.id={user.id}  name={user.name}, uuid={telegram_user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ"
        )
    await message.answer(response_text)


@main_router.message(Command("register_user"))
async def register_user(message: Message) -> None:
    """–ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        telegram_user_id = str(message.from_user.id)
        name = message.from_user.full_name
        user_data = CreateUser(name=name, uuid=telegram_user_id)

        user_service = UserService(db=db_dependency)
        await user_service.create_user(user=user_data)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: name={name}, uuid={telegram_user_id}")
        await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}")
    except HTTPException:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å! –¢—ã –ø–æ–¥ –∫–æ–ª–ø–∞–∫–æ–º!"
        )
