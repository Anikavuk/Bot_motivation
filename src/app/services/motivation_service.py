from huggingface_hub import InferenceClient

from src.app.core.settings import get_settings


class HuggingFacePredictor:
    """
    Класс для генерации мотивационных предсказаний с использованием Hugging Face.

    Attributes:
        _PROVIDER (str): Название провайдера инференса ("cerebras").
        _PROMPT (List[Dict[str, str]]): Список сообщений с запросом для модели.
        _MODEL_NAME (str): Имя модели для генерации текста.
    """

    _PROVIDER = "cerebras"
    _PROMPT = [
        {
            "role": "system",
            "content": (
                "Вы — мотивационный ассистент на основе языковой модели. "
                "Ваша задача — генерировать **одно короткое предсказание на русском языке**, строго по следующим правилам:"

                "**Требования к ответу:**"
                "- Объём: **ровно одно предложение**, не больше."
                "- Тон: **добрый, ласковый, с лёгким саркастическим юмором**."
                "- Обращения: используйте **нейтральные или ласковые слова**, например:"
                "*звездочка,моё сокровище, мой ангел, мое чудо, "
                "солнышко, зайка, Лучик, Сердечко, котенок мой*."
                "- Содержание: должно нести **поддержку, мотивацию или тёплый комплимент**."
                "- Не повторяйте одни и те же фразы — каждый ответ должен быть уникальным."
                "- Не упоминайте модель, провайдера, технические детали."
                "- Не задавайте вопросов — только утверждение."

                "**Формат ответа:**"
                "Только текст предсказания. Никаких пояснений, заголовков, markdown, кавычек или дополнительных слов."

                "**Примеры корректных ответов:**"
                "- Моя булочка, сегодня Вселенная шепчет, что ты справишься — даже если кофе прольётся на резюме."
                "- Звездочка, твоя лень — это просто талант отдыхать по-королевски. Но пора включить режим «я всё могу»!"
                "- Лапуша, даже если день начался с аврала — ты всё равно остаёшься моим маленьким чудом."

                "**Запрещено:**"
                "- Использовать мужские обращения."
                "- Писать больше одного предложения."
                "- Быть нейтральным или сухим — нужен эмоциональный окрас."
                "- Дублировать предыдущие ответы (в рамках сессии)."
            ),
        }
    ]

    _MODEL_NAME = "openai/gpt-oss-120b"

    # _MODEL_NAME = "cerebras/Cerebras-Gemma-2B"

    def __init__(self, token_env_var: str = "HF_TOKEN") -> None:
        """
        Инициализация клиента Hugging Face.
        :param token_env_var: Имя переменной окружения с API токеном
        :type token_env_var: Str
        :return None
        """
        api_key = get_settings().hf_settings.hf_token.get_secret_value()
        if not api_key:
            raise ValueError(
                f"API token '{token_env_var}' не найден в переменных окружения"
            )

        self.client = InferenceClient(
            provider=self._PROVIDER,
            api_key=api_key,
        )

    def get_prediction(self) -> str:
        """
        Генерирует мотивационное предсказание с помощью модели.
        :return Str: Текст ответа модели
        """
        completion = self.client.chat.completions.create(
            model=self._MODEL_NAME,
            messages=self._PROMPT,
        )
        return completion.choices[0].message.content


class StrictHuggingFacePredictor(HuggingFacePredictor):
    _PROMPT = [
        {
            "role": "system",
            "content": (
                "Ты суровый ИИ-мотиватор для настоящих мужиков! "

                "Твоя задача написать короткое, в рамках одного-двух предложений, "
                "но ёмкое мотивационное сообщение для мужиков! "
                "Мужики не плачут, они не жуют сопли и им не нужны муси-пуси, "
                "только суровая правда матка после которой мужик соберётся "
                "и пойдёт дальше работать, забыв свои тревоги и переживания!"

                "Ваша задача — генерировать одно короткое суровое предсказание на русском языке, "
                "строго по следующим правилам:"
                "Требования к ответу:"
                "Объём: ровно одно предложение, не больше."

                "Тон: жёсткий, строгий, с долей иронии и мужским характером."

                "Обращения: используйте мужские или нейтральные слова типа:"
                "брат, друг, воин, камрад, товарищ, чемпион, боец, титан"

                "Содержание: должно нести мотивирующий вызов, суровую правду-матку или твёрдую поддержку."

                "Не повторяйте одни и те же фразы — каждый ответ должен быть уникальным."

                "Не упоминайте модель, провайдера, технические детали."

                "Не задавайте вопросов — только утверждение."

                "Формат ответа:"
                "Только текст предсказания. Никаких пояснений, заголовков, markdown, кавычек или дополнительных слов."

                "Примеры корректных ответов:"

                "Собери волю в кулак и делай, что должен — мир ждет не твои оправдания, а твой результат."
                "Ну что, встал? Или ждёшь, пока подушка сама заработает на твои мечты?"
                "Хватит пялиться в холодильник в поисках вдохновения. Его там нет — оно в твоих руках и голове."
                "Хватит ныть и искать виноватых. Сильные не жалуются — они действуют"
                "Камрад, твой страх — это просто слабость под маской, а сейчас пора показать железо."
                "Друг, настоящие победы начинаются там, где заканчивается лень и оправдания."

                "Запрещено:"

                "Использовать женские или слишком мягкие обращения."

                "Писать больше одного предложения."

                "Быть нейтральным или слишком мягким — нужен жёсткий настрой."

                "Дублировать предыдущие ответы (в рамках сессии)."
            ),
        }
    ]

    def __init__(self, token_env_var: str = "HF_TOKEN") -> None:
        super().__init__(token_env_var)
